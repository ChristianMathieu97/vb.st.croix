<?xml version="1.0"?>
<doc>
<assembly>
<name>
KC01
</name>
</assembly>
<members>
<member name="T:KC01.My.Resources.Resources">
<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member>
<member name="P:KC01.My.Resources.Resources.ResourceManager">
<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member>
<member name="P:KC01.My.Resources.Resources.Culture">
<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member>
<member name="M:KC01.basOutlookContacts.PurgeOutlookCustomerContacts">
 <summary>
 This procedure compares the customer numbers in the customer table with the customer number in the Microsoft Office Outlook 
 'Customers' folder and deletes any customer contact item that doesn't exist in the customer table in the database
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.MySettingsChanger.SetConnectionString(System.String)">
 <summary>
 This procedure sets the connection string at run-time
 </summary>
 <param name="cnnString">The connection string</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.ImportData(System.String@)">
 <summary>
 This procedure imports data into the database from the text files (.xtr files) that are transmitted from the Titan server
 </summary>
 <param name="ImportFileName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impSalesman">
 <summary>
 This procedure imports data into the Salesman table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impShipvia">
 <summary>
 This procedure imports data into the Ship Via table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impCommission">
 <summary>
 This procedure imports data into the Commission table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impCustomer">
 <summary>
 This procedure imports data into the Customer table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impCustomerSH">
 <summary>
 This procedure imports data into the Customer Ship To table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impCustomerM">
 <summary>
 This procedure imports data into the Customer Memo table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impOrderHead">
 <summary>
 This procedure imports data into the Order table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impOrderLine">
 <summary>
 This procedure imports data into the Order Line table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impWorksheetHead">
 <summary>
 This procedure imports data into the Worksheet Header table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impWorksheetLine">
 <summary>
 This procedure imports data into the Worksheet Line table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impWorksheetError">
 <summary>
 This procedure imports data in the Worksheet Error Message table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impSeason">
 <summary>
 This procedure imports data into the Season table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impSeasonType">
 <summary>
 This procedure imports data into the Season Type table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impOrderType">
 <summary>
 This procedure imports data into the Order Type table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impProductGroup">
 <summary>
 This procedure imports data into the Product Group table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impProductType">
 <summary>
 This procedure imports data into the Product Type table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impAttrib">
 <summary>
 This procedure imports data into the Attribute table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impItem">
 <summary>
 This procedure imports data into the Item table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impProductGroupAttrib">
 <summary>
 This procedure imports data into the Product Group Attribute table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.impCustSeasProj">
 <summary>
 This procedure imports data into the Customer Seasonal Projections table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.ClrItemTable">
 <summary>
 This procedure is no longer in use
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.ClrWsErrorMsg(System.String@)">
 <summary>
 This procedure will delete all error message records in WsErrorMsg for a specific worksheet
 </summary>
 <param name="cWsNo">The worksheet id</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.clrOrderLines(System.Int32@)">
 <summary>
 This procedure will delete order-lines for a specific order number
 </summary>
 <param name="nOrdNo">The order number</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.clrCustMemos(System.String@,System.Int32@)">
 <summary>
 This procedure deletes memos from the CustomerMemo table for a specific customer
 </summary>
 <param name="cCusNum"></param>
 <param name="nPgNum"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basImport.isFileZeroBytes(System.String@)">
 <summary>
 This procedure is no longer in use, but will check the length of a file to see if it contains any data
 </summary>
 <param name="cFilNam"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.btnExitCustInfo_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will exit the customer information screen and open up another screen depending on the value of the 'fromLocation'
 variable.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCustomer">
 <summary>
 This procedure will attemp to find a customer number based on user input
 </summary>
 <remarks>The users attempts to find a customer based on customer number or name.  If the procedure finds a customer then
 it will enable the First,Last,Next,Previous buttons to allow for customer navigation</remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCust(System.String@,System.String)">
 <summary>
 This procedure will find a customer in the customer table and fill the associated fields on the customer information screen
 </summary>
 <param name="cNdx">This tells the procedure to find a customer based on either number or name</param>
 <param name="cSrchStrg">This is the string to search for in the customer table</param>
 <returns>A boolean indicating that the procedure found a customer (true) or didn't find a customer (false) </returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.chkNoOrderWs_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will change the record filter on the Worksheets table 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>If the chkNoOrderWs checkbox is checked, this procedure filters the worksheets grid and will not show worksheets that are orders
 else if unchecked it removes the filter</remarks>
</member>
<member name="M:KC01.frmCustInfo.chkViewActiveCust_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will change the record filter on the Customer table
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>If the chkViewActiveCust checkbox is check, this procedure filters the customers table and will only show customers
 whose status is set to 'P' (permanent).  If unchecked, all customers will be accessible to view</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmbASRView_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will change which 'ASR' screen is visible on the 'ASR' tab and loads the appropriate data.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmbCustomerWebsites_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will load a customer's webpage (if the customer has a webpage)
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdCustomerUpdate_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Customer Update screen
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>The procedure opens the Customer Update screen to allow the user to make changes to the Customer's information</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdCustShipUpdate_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open the Customer Ship To Update screen
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>The procedure opens the Customer SHip To Update screen to allow the user to make changes to the Customer's Ship To information</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdDeleteAppointment_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will delete an appointment item in the user's Microsoft Office Outlook calendar
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>When the user clicks on the cmdDeleteAppoinment button, this procedure will search for the first appointment item in 
 Microsoft Office Outlook that match the item clicked on and delete it from Outlook</remarks>
</member>
<member name="M:KC01.frmCustInfo.CreateASRSpreadsheet(System.Windows.Forms.DataGridView@)">
 <summary>
 This procedure creates an Excel spreadsheet for emailing 'ASR' information
 </summary>
 <param name="tmpDataGrid"></param>
 <remarks>When the user wants to print or email 'ASR' information this procedure creates a spreadsheet with the 'ASR' row and
 column header information </remarks>
</member>
<member name="M:KC01.frmCustInfo.LoadASRSpreadsheetData(System.Windows.Forms.DataGridView@)">
 <summary>
 This procedure will email 'ASR' information and print history
 </summary>
 <param name="tmpFlexGrid"></param>
 <remarks>This procedures gets the data for the 'ASR' based on the header information.  For example, the program will find the data
 for product type 'St Croix' and 'Spring 2012' and put it into the appropriate cell in the spreadsheet</remarks>
</member>
<member name="M:KC01.frmCustInfo.WriteNotesGeneralComments">
 <summary>
 This procedure puts general 'Notes' comments/text into the 'NotesComments' table
 </summary>
 <remarks>Notes comments are used in Account Status Reports (ASR) when the Customer plans to order product later.  The Sales Rep 
 will write notes to use for a later visit and hopefully a later order.</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdNewCust_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will get a new customer number when the user clicks to add a new customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>This procedure will clear the New Customer screen and display a new customer number</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdNewCustEdit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will load the new customer screen and allow the user to edit the information
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdNewWs_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will get a new worksheet number and load the new worksheet form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>When the user clicks to create a new worksheet, this procedure will get a new worksheet number, display a warning if the
 user does not select the default shipping address, and display the new worksheet form</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdRetransmit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will reset the transmit status on a selected worksheet
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>When the user selects a worksheet to re-transmit, this procedure will reset fields so that it appears as though the 
 worksheet has never been transmitted to Knitcraft.  This is most often done when a worksheet did not transmit properly</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdViewEditWs_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the worksheet form and the data associated with the selected worksheet number
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdViewOrder_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the order form and the data associated with the selected order number
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdPrint_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will print the selected worksheet 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdWebBack_Click(System.Object,System.EventArgs)">
 <summary>
  This button will take you back to whatever document you were previously viewing
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdWebForward_Click(System.Object,System.EventArgs)">
 <summary>
 This button will take you forward to the next document if you have previously browsed multiple documents and had then backed-up to the page you are currently viewing.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdWebOpenBrowser_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open the current webpage in the default internet browser
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdWebRefresh_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will reload the current webpage
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdWebStop_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will stop loading the current webpage (assuming it has not already loaded)
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdOpenAppointment_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open the select appointment item in Microsoft Office Outlook
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdNewAppointment_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will create a new Microsoft Office Outlook calendar item and display it allowing the user to create an appointment
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.UpdateCustShipInfo">
 <summary>
 This procedure will find the customer ship to record for the current customer and display the data in the appropriate controls
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCustAppointments">
 <summary>
 This procedure finds calendar items in Microsoft Office Outlook for customer and loads the appointment information into a datagrid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCustOrders">
 <summary>
 This procedure finds order records for the current customer and displays the data in the order grid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCustWorksheets">
 <summary>
 This procedure finds ws-ord-head records for the current customer and displays the data in the worksheet grid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.frmCustInfo_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure is fired when the form is activated and will filter customer data based on the status (permanent, inactive, new) 
 of the customer. If the 'fromLocation' variable is populated, the procedure will load data for the customer that is displayed
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.frmCustInfo_Deactivate(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the current_tab variable which is used to remember which tab is currently displayed and will be displayed
 again when the program comes back to this form.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.frmCustInfo_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 This procedures fires when the form is closing.  It resets the data source for the grids so that the grids are empty when the 
 program comes back to this form.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.frmCustInfo_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure will simulate a user pressing the tab key to move between fields when pressing the return key. 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.frmCustInfo_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure is called when the form loads.  It will load customer data if the 'fromLocation' and cCustNumber variables are
  not blank.  It also loads the customer combo box so the user can choose which customer to display.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.txtSelectedShip_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will fire when the user has changes the Selected Ship To 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>If the selected ship to is the default the text will be red otherwise the text will be blue.</remarks>
</member>
<member name="M:KC01.frmCustInfo.mebName_Leave(System.Object,System.EventArgs)">
 <summary>
 This procedure will set the focus to the Customer text box if the user leaves the Customer text box without typing in a name.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dgvASR_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure updates the Customer Status table when the user leaves a cell in the 'ASR' grid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>This procedure allows the user to create records in the Customer Status table.  This is part of the process of 
 creating the customer's ASR (Account Status Report)</remarks>
</member>
<member name="M:KC01.frmCustInfo.dtgASR_CellLeave(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedures gets called when leaving a cell in the 'ASR' grid and sets a variable 'lastcellvalue' to the value of that cell
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.optSpring_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will display data for the Spring season in the 'ASR' history graphs
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.optFall_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will display data for the Fall season in the 'ASR' history graphs
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.tabCustInfo_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedures fires when a user selects a tab and hides/shows components in response to the user's selection
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.Timer1_Tick(System.Object,System.EventArgs)">
 <summary>
 Timer1 is currently disabled.  However, when it is enabled, this procedure will fire when Timer1's time interval has elapsed.  
 It looks to see if Outlook is open and brings the Outlook window to the front of the display.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.setFormViewStatus(System.Int16@)">
 <summary>
 This procedures sets different views of components based on the value of the 'StatNo' parameter
 </summary>
 <param name="StatNo"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.setFvStatusNewRec">
 <summary>
 This procedure will change the view of the display based on the status of the customer
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.clrCustFields">
 <summary>
 This procedure clears the display fields for the components that display Customer data
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.clrShipFields">
 <summary>
 This procedure clears the display fields for the components that display the Customer Ship To data
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.clrNewCustForm">
 <summary>
 This procedure clears the fields for the components that display the Customer and Customer Ship To data
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.saveNewCust">
 <summary>
 This procedures updates variables that are used when saving Customer information
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.SaveNewCustShip">
 <summary>
 This procedures updates variables that are used when saving Customer Ship To information
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.saveNewCustData">
 <summary>
 This procedures creates a record in the Customer table and writes the data from the form to the record
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.SaveEditedCustData">
 <summary>
 This procedures modifies a record in the Customer table and writes the data from the form to the record
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.saveNewShipData">
 <summary>
 This procedures creates a record in the Customer Ship To table and writes the data from the form to the record 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.SaveEditedCustShipData">
 <summary>
 This procedures modifies a record in the Customer Ship To table and writes the data from the form to the record
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.msgCreateNewWs(System.String@)">
 <summary>
 This procedure is no longer in use
 </summary>
 <param name="CustType"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.loadNewCustEditScrn">
 <summary>
 This procedure will load current customer data for modification by the user
 </summary>
 <remarks>When the user clicks on the 'edit' button, this procedures loads the data so that it can be modified as necessary</remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCustMemos">
 <summary>
 This procedure finds records in the Customer Memo table and displays them in the Customer Memo datagrid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.FindCustWebsites">
 <summary>
 This procedure finds website information for the current customer and adds it to a combo box for the user to select a 
 webpage to navigate to.
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.setCmdNewWsStatus">
 <summary>
 This procedures will enable or disable the "New Worksheet" button based on the status of the current customer or the number of
 ship to addresses
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.WebBrowser1_ProgressChanged(System.Object,System.Windows.Forms.WebBrowserProgressChangedEventArgs)">
 <summary>
 This procedure displays a progress bar.  The progress bar shows the loading progress of the customer's website
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.IsPopupWindow">
 <summary>
 This procedure is not in use
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.CreateASRGrid(System.Windows.Forms.DataGridView@)">
 <summary>
 This procedure creates and formats the labels for the ASR grid
 </summary>
 <param name="tmpDataGrid"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.LoadASRGrid">
 <summary>
 This procedures loads the data for the ASR grid based on the row and column labels
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.LoadHistoryGrid">
 <summary>
 This procedure loads historic customer data into the History grid for the current customer
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.GetSeason(System.String@,System.Int16@,System.String@)">
 <summary>
 This procedure returns a season code that is created based on the parameters sent to it
 </summary>
 <param name="strCurrentSeason">The current season code</param>
 <param name="intYearsAgo">How many years to go back</param>
 <param name="strSeasonTypeTarget">The type of season (F=Fall,S=Spring,etc)</param>
 <returns>A season code</returns>
 <remarks>This procedure is used when building the labels for the ASR grids</remarks>
</member>
<member name="M:KC01.frmCustInfo.LoadNotesGrid(System.Windows.Forms.DataGridView@)">
 <summary>
 This procedure loads data from the NotesComments table into the ASR datagrid
 </summary>
 <param name="tmpDataGrid"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.CreateHistoryGraphs(System.String@)">
 <summary>
 This procedure creates the graphs that show historical sales for the current customer on the ASR tab
 </summary>
 <param name="tmpFirstHistorySeason"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dblShipNoList_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the 'cFlagSHipStatus' variable which shows the Customer Ship To status information (Permanent,Inactive, etc).
 It will also call setCmdNewWSStatus which enables or disables the 'New Worksheet' button.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dblShipNoList_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 This procedure enables or disables the 'New Worksheet' button based on the status os the customer status (Permanent,Inactive,etc)
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdEmailWorksheet_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure calls EmailWorksheets.  EmailWorksheets will create an email item in Microsoft Office Outlook and attach the 
 Crystal Reports worksheet report to the email.  The default email address is the customer's email address
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdPrintGraphs_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will print the history graphs on the ASR screen to the default printer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.FillCustomerComboBox">
 <summary>
 This procedure fills a combo box that displays the names of customers.
 </summary>
 <remarks>This is the combo box that displays the names of customers.  Users select a customer name to view data for that
 customer </remarks>
</member>
<member name="M:KC01.frmCustInfo.optOrderBy_0_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will hide the customer combo box when the user wants to look for a customer by customer id instead of customer name
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.optOrderBy_1_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will hide the customer id text box when the user wants to look for a customer by customer name using the combo box
 instead of searching by customer id
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.txtCustID_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure is used to make a call to FindCustomer to search for a customer by customer id; It also clears the text in the
 customer id text box.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdNext_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure navigates to the next customer record and disables the button if it finds the last customer record
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdPrevious_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure navigates to the previous customer record and disables the button if it finds the first customer record
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdFirst_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure navigates to the first customer record
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdLast_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure navigates to the last customer record
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdNewCustFinished_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure saves the data for a new customer unless the user aborts saving.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>This procedure saves new customer data when creating a new customer or when modifying a new customer that hasn't yet been
 transmitted to the FTP server</remarks>
</member>
<member name="M:KC01.frmCustInfo.GetCustomerData(System.String)">
 <summary>
 This procedure is called when data from the database table has changed but isn't yet reflected in the display of the screen.
 </summary>
 <param name="selectCommand"></param>
 <remarks>This procedure refreshes the display in the control after data has changed</remarks>
</member>
<member name="M:KC01.frmCustInfo.GetCustomerShData(System.String)">
 <summary>
 This procedure is called when data from the database table has changed but isn't yet reflected in the display of the screen.
 </summary>
 <param name="selectCommand"></param>
 <remarks>This procedure refreshes the display in the control after data has changed</remarks>
</member>
<member name="M:KC01.frmCustInfo.GetWorksheetData(System.String)">
 <summary>
 This procedure is called when data from the database table has changed but isn't yet reflected in the display of the screen.
 </summary>
 <param name="selectCommand"></param>
 <remarks>This procedure refreshes the display in the control after data has changed</remarks>
</member>
<member name="M:KC01.frmCustInfo.GetOrderData(System.String)">
 <summary>
 This procedure is called when data from the database table has changed but isn't yet reflected in the display of the screen.
 </summary>
 <param name="selectCommand"></param>
 <remarks>This procedure refreshes the display in the control after data has changed</remarks>
</member>
<member name="M:KC01.frmCustInfo.cmbAutoCompleteCustName_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedures attempts to find a customer based on the text that the user has entered prior to pressing the "Enter" key
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.frmCustInfo_Shown(System.Object,System.EventArgs)">
 <summary>
 This procedure resets the customer combo box's text and sets the focus to the same
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>This procedure ensures that the customer combo box is ready for user input each time the application comes back to 
 this form</remarks>
</member>
<member name="M:KC01.frmCustInfo.DataGridView1_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure will open up the worksheet form when the user double clicks a record in the worksheet datagrid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmbautoCompleteCustName_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure finds a customer when the user selects a customer name from the customer combo box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.lblCustEmail_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays a new email window and puts the current customer's email address in the to: box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.lblCustSHWebsite_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will load the website that is currently displayed on the customer ship to information screen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.lblCustSHEmail_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays a new email window and puts the current customer ship to email address in the to: box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.lblCustContactEmail_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays a new email window and puts the current customer contact email address in the to: box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.lblCustSHContactEmail_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays a new email window and puts the current customer ship to contact email address in the to: box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdEmailASR_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will email the ASR (Excel spreadsheet in the body of the email) to the address that comes from the 'SalesDeptEmail'
 field in the "Defaults" table
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdEmailNotes_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will email the ASR Notes information (Excel spreadsheet in the body of the email) to the address that comes from the 
 'SalesDeptEmail' field in the "Defaults" table
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdEmailPass_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will email the ASR Pass information (Excel spreadsheet in the body of the email) to the address that comes from the 
 'SalesDeptEmail' field in the "Defaults" table
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.cmdPrintHistory_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure prints the history datagrid (Excel spreadsheet) for the current customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dtpNotesFollowup_ValueChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will update (create/modify) the record in the NotesComments table when the user changes the date time picker value
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dgvNotes_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure will update the CustomerStatus table 'notes' records when the user leaves a cell in the ASR Notes grid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dtgNotes_Leave(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to update the general comments of the Notes ASR in the CustomerStatus table when the Notes grid 
 loses focus
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dgvPass_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure will update the CustomerStatus table 'pass' records when the user leaves a cell in the ASR Pass grid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.txtNoteGenComments_Leave(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to update the general comments of the Notes ASR in the CustomerStatus table when the General Comments
 text box loses focus
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.txtNotesComments_Enter1(System.Object,System.EventArgs)">
 <summary>
 I have no clue what this procedure does - it doesn't make any sense to me.  Probably doesn't work or get to the 'then' part
 but I don't want to modify it because I haven't seen any errors come from it
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.isCustInShipFile(System.String@)">
 <summary>
 This procedure will see if the customer has a record in the customer ship to table
 </summary>
 <param name="cCusNum">The customer number</param>
 <returns>A boolean indicating the the customer has a ship to record (true) or does not have a ship to record (false)</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.btnGo_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to FindCustomer to locate a record in the customer table and then clears the text in the customer 
 combo box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dgvOrders_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure will open the order form and display the data for the selected order
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.dgvWorksheets_CellEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure will enable the Retransmit button if the worksheet's transmitted status is set to True
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.MapIt(System.String@,System.String@,System.String@,System.String@)">
 <summary>
 This procedure will display a webbrowser that loads a Google map for the current customer
 </summary>
 <param name="StreetString"></param>
 <param name="CityString"></param>
 <param name="StateString"></param>
 <param name="ZipString"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.btnMap_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to the MapIt procedure to display a map that shows the current customer's location 
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.Button1_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the webbrowser that displays a map for the current customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.btnPrintMap_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will print a map with the current customer's location
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.CheckBox1_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 If this checkbox is checked, the program will copy the customer information to the customer ship-to side of the screen when 
 creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebFaxNo_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the fax number from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebCustContactEmail_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the customer contact email address from the customer to the customer ship to side of the screen when 
 creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebContact_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the contact name from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebZipCode_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the customer zip code from the customer to the customer ship to side of the screen when creating a
 new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebState_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the state from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebCity_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the city from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebAddr3_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies Address3 from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebAddr2_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies Address2 from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebAddr1_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies Address1 from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebName_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the customer name from the customer to the customer ship to side of the screen when creating a new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebCustEmail_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the customer email address from the customer to the customer ship to side of the screen when creating a 
 new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustInfo.mebPhoneNo_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure copies the customer phone number from the customer to the customer ship to side of the screen when creating a 
 new customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.cmdSearch_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure runs a search in the item file for the criteria entered on the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.frmInventory_Activated(System.Object,System.EventArgs)">
 <summary>
 This event fires when the form is loaded.  If the boolean variable 'CameFromWorksheetForm' is set to true an automatic search
 will start with the 'CurrWorksheetItem' item.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.frmInventory_Load(System.Object,System.EventArgs)">
 <summary>
 This event will automatically load when the form is displayed.  It initializes the controls used in the search.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.GetSearchOption">
 <summary>
 This procedure initializes the type of search by getting the value from the 'InventorySearch' field in the 'Defaults' field
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.WriteSearchOption">
 <summary>
 This procedure will update the 'InventorySearch' field of the 'Defaults' table 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.FillProdGroupComboBox">
 <summary>
 This procedure will format and populate the 'Product Group' combo box 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.FillSizeComboBox">
 <summary>
 This procedure will format and populate the 'Size' combo box 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.FillColorComboBox">
 <summary>
 This procedure will format and populate the 'Color' combo box 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.frmInventory_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
 <summary>
 This procedure resets some variables and clears the form when the form closes
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.chkAllItems_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will perform a search with the criteria entered into the form 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.LoadColorsSizes(System.String@)">
 <summary>
 This procedures creates the row and column headings for the inventory datagrid for the item that is selected in the listbox
 </summary>
 <param name="StyleNo"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.LoadQuantities(System.String@)">
 <summary>
 This procedure loads the quantities for the item selected in the inventory datagrid
 </summary>
 <param name="StyleNo"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.optQtyOnHand_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will make a call to 'LoadQuantities' to display the 'on-hand' quantities
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.optQtyPotential_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will make a call to 'LoadQuantities' to display the 'potential' quantities
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.optQtyToSell_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will make a call to 'LoadQuantities' to display the 'to sell' quantities
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.findItemsbyNumber">
 <summary>
 This procedure will search the item file with the criteria entered on the form looking at substrings of the item-no to see if they 
 match the text entered in style, color and size text boxes.
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.findItemsbyName">
 <summary>
 This procedure will search the item file with the criteria entered on the form looking to see if the style text box matches attrib1
 of the item record, color text box matches attrib2 of the item record and size text box matches attrib3 of the item record
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.optSearchByName_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to write out the default search option to the 'Defaults' table.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.optSearchByNumber_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to write out the default search option to the 'Defaults' table.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.Timer1_Tick(System.Object,System.EventArgs)">
 <summary>
 This procedure alternates the font from bold to regular on the Search button.  This is to get the user's attention that the 
 search criteria has changed and they need to click on the Search button to refresh the results
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.txtDescription_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will clear the informational data in the upper right corner of the screen if all the search-related boxes are empty
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.txtDescription_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure makes a call to search for an item based on the criteria set on the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.txtStyle_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will clear the informational data in the upper right corner of the screen if all the search-related boxes are empty
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.txtStyle_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure makes a call to search for an item based on the criteria set on the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.ListBox1_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks on the listbox, this procedure will search the item file for the item that was selected and display 
 information related to the item in the upper right corner of the window.  It will then make a call to 'LoadColorsSizes' to 
 create the row and column labels in the inventory datagrid. 
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.cmbColor_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will clear the informational data in the upper right corner of the screen if all the search-related boxes are empty
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.cmbColor_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure makes a call to search for an item based on the criteria set on the form
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.cmbSize_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure makes a call to search for an item based on the criteria set on the form
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.cmbSize_TextUpdate(System.Object,System.EventArgs)">
 <summary>
 This procedure will clear the informational data in the upper right corner of the screen if all the search-related boxes are empty
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.cmdClear_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will clear the screen and the 'search boxes' so that a new search can be conducted
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.dtpBeginShip_ValueChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will enable the timer so that the 'Search' button will alternate bold and regualar text to alert the user that
 the search criteria has changed and that the search button needs to be clicked to updated the search results
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.dtpEndShip_ValueChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will enable the timer so that the 'Search' button will alternate bold and regualar text to alert the user that
 the search criteria has changed and that the search button needs to be clicked to updated the search results
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.dgvInventory_CellMouseMove(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
 <summary>
 When a user moves over a cell, this procedure will update the status bar at the bottom of the screen with information related to 
 the item whose quantities are shown in that cell
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmInventory.dgvInventory_Click(System.Object,System.EventArgs)">
 <summary>
 When a user click on a cell in the inventory datagrid, this procedure will open the 'Customer Item' report which shows what 
 customers order that item
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPreviewWkstErr.frmPreviewWkstErr_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure sets up the data for the 'Worksheet Error' report and loads the Crystal Report in the Crystal Reports report viewer 
 control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basZip.UncompressDeleteKCFiles">
 <summary>
 This procedure will decompress all zip'd files in the import folder and then delete the compressed file
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basZip.Compress(System.IO.FileInfo)">
 <summary>
 This procedure compresses a file into a .gz (GZip) file format
 </summary>
 <param name="fi"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basZip.Decompress(System.IO.FileInfo)">
 <summary>
 This procedure decompresses a file that is in the .gz file format
 </summary>
 <param name="fi">The name of the file to decompress</param>
 <remarks></remarks>
</member>
<member name="T:KC01.basFTP">
 <summary>
 This code was borrowed from the internet and modified for Knitcraft
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basFTP.FtpSession.RetrieveFtpDirectory(System.String)">
 <summary>
 This procedure gets a listing of files from a directory on the FTP server
 </summary>
 <param name="DirectoryUri"></param> the path to the directory (a.k.a folder)
 <returns></returns> listing of files from a directory on the FTP server
 <remarks></remarks>
</member>
<member name="M:KC01.basFTP.FtpSession.RetrieveFtpFile(System.String,System.String)">
 <summary>
 This procedure downloads a file from the FTP server
 </summary>
 <param name="ftpFileUri"></param> the location and name of the file being downloaded
 <param name="destFilePath"></param> the destination of the file that is being downloaded
 <remarks></remarks>
</member>
<member name="M:KC01.basFTP.FtpSession.DeleteFtpFile(System.String)">
 <summary>
 This procedure deletes the file after downloading it
 </summary>
 <param name="sourceFilePath"></param> the file path of the file being deleted
 <returns></returns> True if the file is deleted successfully
 <remarks></remarks> 
</member>
<member name="T:KC01.SaleForcDataSet">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.AttribDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CommissionDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Customer_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerMemoDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._CustomerMemo_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerSHDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._CustomerSH_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._cust_seas_projDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ItemDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.OrderDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Order_oldDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_lineDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_line_oldDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_line_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.OrderTypeDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ProdGroupDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ProdTypeDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Product_Group_AttributesDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Purge_DefaultsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SalesmanDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SeasonDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Season_oldDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SeasonTypeDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ShipViaCodeDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSErrorMsgDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._WSErrorMsg_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSItemTempDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSMemoDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._WSMemo_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_headDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_head_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_lineDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_line_historyDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryOLunitsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryWSOLUnitsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryWSunitsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerStatusDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.NotesCommentsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.DefaultsDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.AttribRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CommissionRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Customer_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerMemoRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._CustomerMemo_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerSHRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._CustomerSH_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._cust_seas_projRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ItemRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.OrderRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Order_oldRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_lineRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_line_oldRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_line_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.OrderTypeRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ProdGroupRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ProdTypeRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Product_Group_AttributesRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Purge_DefaultsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SalesmanRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SeasonRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Season_oldRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SeasonTypeRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ShipViaCodeRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSErrorMsgRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._WSErrorMsg_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSItemTempRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSMemoRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._WSMemo_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_headRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_head_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_lineRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_line_historyRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryOLunitsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryWSOLUnitsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryWSunitsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerStatusRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.NotesCommentsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.DefaultsRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.AttribRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CommissionRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Customer_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerMemoRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._CustomerMemo_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerSHRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._CustomerSH_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._cust_seas_projRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ItemRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.OrderRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Order_oldRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_lineRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_line_oldRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._Order_line_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.OrderTypeRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ProdGroupRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ProdTypeRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Product_Group_AttributesRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Purge_DefaultsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SalesmanRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SeasonRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.Season_oldRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.SeasonTypeRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.ShipViaCodeRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSErrorMsgRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._WSErrorMsg_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSItemTempRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.WSMemoRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._WSMemo_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_headRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_head_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_lineRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet._ws_ord_line_historyRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryOLunitsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryWSOLUnitsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.qryWSunitsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.CustomerStatusRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.NotesCommentsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSet.DefaultsRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.AttribTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CommissionTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CustomerTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Customer_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CustomerMemoTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CustomerMemo_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CustomerSHTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CustomerSH_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.cust_seas_projTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ItemTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.OrderTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Order_oldTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Order_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Order_lineTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Order_line_oldTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Order_line_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.OrderTypeTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ProdGroupTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ProdTypeTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Product_Group_AttributesTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Purge_DefaultsTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.SalesmanTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.SeasonTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.Season_oldTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.SeasonTypeTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ShipViaCodeTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.WSErrorMsgTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.WSErrorMsg_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.WSItemTempTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.WSMemoTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.WSMemo_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ws_ord_headTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ws_ord_head_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ws_ord_lineTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.ws_ord_line_historyTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.qryOLunitsTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.qryWSOLUnitsTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.qryWSunitsTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.CustomerStatusTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.NotesCommentsTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.DefaultsTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.TableAdapterManager">
<summary>
TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
</summary>
</member>
<member name="M:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.UpdateUpdatedRows(KC01.SaleForcDataSet,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow})">
<summary>
Update rows in top-down order.
</summary>
</member>
<member name="M:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.UpdateInsertedRows(KC01.SaleForcDataSet,System.Collections.Generic.List{System.Data.DataRow})">
<summary>
Insert rows in top-down order.
</summary>
</member>
<member name="M:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.UpdateDeletedRows(KC01.SaleForcDataSet,System.Collections.Generic.List{System.Data.DataRow})">
<summary>
Delete rows in bottom-up order.
</summary>
</member>
<member name="M:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.GetRealUpdatedRows(System.Data.DataRow[],System.Collections.Generic.List{System.Data.DataRow})">
<summary>
Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
</summary>
</member>
<member name="M:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.UpdateAll(KC01.SaleForcDataSet)">
<summary>
Update all changes to the dataset.
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.UpdateOrderOption">
<summary>
Update Order Option
</summary>
</member>
<member name="T:KC01.SaleForcDataSetTableAdapters.TableAdapterManager.SelfReferenceComparer">
<summary>
Used to sort self-referenced table's rows
</summary>
</member>
<member name="M:KC01.frmPreviewCustList.frmPreviewCustList_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure sets up the data for the 'Customer List' report and loads the Crystal Report in the Crystal Reports report viewer 
 control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPreviewWksht.frmPreviewWksht_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure sets up the data for the 'Worksheet' report and loads the Crystal Report in the Crystal Reports report viewer 
 control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPreviewWksht.CheckForWSMemos">
 <summary>
 This procedure will determine if there are any memos on the worksheet that is being printed
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmAbout.frmAbout_Load(System.Object,System.EventArgs)">
 <summary>
 Sets the support email address label caption to the value of what is in the 'salesman' table 'supportemailaddr' field
 Sets the database path label caption to the value 
 </summary>
 <param name="eventSender">The name of the object that is calling the procedure</param>
 <param name="eventArgs">Arguments passed to this procedure</param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmAbout.lblDBLocation_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure opens up the application's database if the user is a Windows administrator user
 </summary>
 <param name="sender">The name of the object that is calling the procedure</param>
 <param name="e">Arguments passed to this procedure</param>
 <remarks></remarks>
</member>
<member name="T:KC01.frmCustItemRpt">
 <summary>
 This form will display a report that shows which customers ordered a particular item.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.cmdClear_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure clears the controls of any user entered data that is used when creating a search for an item
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.txtItem_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure will perform a search in the order line table for customers that ordered the item in the txtItem text box
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>When the user presses the "enter" key while in the txtItem text box, this procedure will search the order line table
 for orders that include the item in the txtItem text box</remarks>
</member>
<member name="M:KC01.frmCustItemRpt.cmbViewBy_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will make the refresh button visible when the user selects an option in the "View By" combo box
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.cmbViewBy_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure will make the refresh button visible when the user selects an option in the "View By" combo box
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.frmCustItemRpt_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedures is fired when this form is loaded.  It will automatically search for the 'CurrInventoryItem' item when coming from
 another form and the boolean'CameFromInventoryForm' variable is set to true
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.frmCustItemRpt_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 This procedure will clear the form when the form closes
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.frmCustItemRpt_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure clears the form and sets up the "View By" combo box and the datetimepicker controls
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.FindOrderLines">
 <summary>
 This procedures looks for records in the order line file where the record matches the criteria on the form
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.BuildNodes">
 <summary>
 This procedure calls other procedures to build the "tree" on the left side of the screen
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.BuildCustomerNodes">
 <summary>
 This procedure will build a Windows Explorer style tree with the names of customers that have order the item being searched
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.BuildOrderDateNodes">
 <summary>
 This procedure will build a Windows Explorer style tree with the dates of orders for customers that have order the item 
 being searched
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.BuildQuantityNodes">
 <summary>
 This procedure will build a Windows Explorer style tree with the quantities of items on an order where a customer has
 ordered the item being searched
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.optAscending_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will make the refresh button visible when checked
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.optDescending_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will make the refresh button visible when checked
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.Timer1_Tick(System.Object,System.EventArgs)">
 <summary>
 This procedure will make the "Refresh" button blink to make the user aware that the item search criteria has been modified.  This
 is an indication that the "Refresh" button needs to be clicked.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.treCustItem_AfterCollapse(System.Object,System.Windows.Forms.TreeViewEventArgs)">
 <summary>
 When the user clicks to collapse a node on the tree, the highlighted item changes.  Therefore the data for the selected item has 
 to be displayed.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.treCustItem_NodeClick(System.Object,System.Windows.Forms.TreeNodeMouseClickEventArgs)">
 <summary>
 When a user clicks on a node in the tree, this procedure will update the binding source for the datagrid and will display 
 the associated data for that node
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.dtpToOrderDate_ValueChanged(System.Object,System.EventArgs)">
 <summary>
  This procedure will make the refresh button visible when changed
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.dtpFromOrderDate_ValueChanged(System.Object,System.EventArgs)">
 <summary>
  This procedure will make the refresh button visible when changed
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustItemRpt.cmdRefresh_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will update the search results when clicked
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustomerUpdate.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustomerUpdate.cmdUpdate_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure creates an Excel spreadsheet with customer data for the current customer.  It then sends an email with the 
 spreadsheet in the body of the email to the email address identified in the 'CustomerServiceEmail' field in the 'Defaults' table
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustomerUpdate.frmCustomerUpdate_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the forms controls with the information from the current Customer record
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustShipUpdate.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustShipUpdate.cmdUpdate_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure creates an Excel spreadsheet with customer ship to data for the current customer.  It then sends an email with the 
 spreadsheet in the body of the email to the email address identified in the 'CustomerServiceEmail' field in the 'Defaults' table
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustShipUpdate.frmCustShipUpdate_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the forms controls with the information from the current Customer ship to record
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPreviousWkstOrder.frmPreviousWkstOrder_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure looks for worksheets and customer for the current customer and displays them in a Windows Explorer type tree.  It is
 suppossed to let the user know what product types have been ordered for a particular season
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSetItineraryDate.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form and sets a global variable to identity that the user clicked the cancel button on this form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSetItineraryDate.cmdContinue_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure sets a global variable to identify the start date of the itinerary being emailed
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSetItineraryDate.frmSetItineraryDate_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure defaults the calendar (dtpicker) to today
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSplash.frmSplash_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure displays program version information on the form and also makes a call to populate global variable that hold the 
 database path and name
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.getXmitNotOnOrder">
 <summary>
 Get a list of those worksheets that have been processes for transmit but are still at the NO VAL validation status.
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.chkHideCancelled_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure filters data in the data grid.  If the user checks the checkbox, worksheets that have been cancelled will not show.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.cmdGetCustomer_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display customer information from the selected worksheet on the customer information screen 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.cmdGetWS_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the worksheet assosciated with the selection
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.frmXmitButNotOnOrder_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to load the data into the grid
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNotOnOrder.FormatXmitButNotOnOrderGrid">
 <summary>
 This procedure formats the datagrid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdFilesToImport_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the File To Import form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdFilesToXmit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Files To Transmit form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdWkstErr_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Error Message List form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdWkstNotOnOrder_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will show the Transmit But Not on Order form for worksheets that have not been converted to an order but have been
 transmitted
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdWkstNotTrans_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will show the Worksheets Ready to Transmit form for worksheets that need to be transmitted to Knitcraft
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdWkstWithNoResponse_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure shows the Worksheets Waiting for a Response form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.frmMainScreen_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure is called when the form is displayed.  It performs the following:
 1)  Displays a menu option to open the database if the user is and administrator on the Windows computer
 2)  Fills the quick appointment combo box with customer names
 3)  Checks to see if the database needs to perform a purge, and if so, does it
 4)  Runs the routine to download any Titan files that need to be imported into the database
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.frmMainScreen_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 This procedure disables timers that perform various functions and checks to make sure no files are being downloaded before closing
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.EmailAppts(System.DateTime)">
 <summary>
 This procedure emails the sales reps itinerary to the address stored in the 'AppointmentEmail' field in the 'Defaults' table using
 the built in SMTP client
 </summary>
 <param name="dteStartDate"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.AddApptRow(Microsoft.Office.Interop.Outlook.AppointmentItem)">
 <summary>
 This procedure is used to add a line to the body of the itinerary email.  It adds the appointment information.
 </summary>
 <param name="objAppt"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.Quote(System.String@)">
 <summary>
 This procedure put quotes around the text passed into it
 </summary>
 <param name="MyText"></param>
 <returns>A string variable with quotes</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.ShowHideAppts">
 <summary>
 This procedure will show or hide the calendar that is used to display Sales Reps appointments
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuCommProComm_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will download any files that are waiting to be picked up from the Titan server
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuCustItem_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Customer Item Report - A report that shows which customers ordered a specific item
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuHelpContents_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the program's help file
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuInventoryMatrix_Click(System.Object,System.EventArgs)">
 <summary>
 This program displays the inventory form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuAbout_Click(System.Object,System.EventArgs)">
 <summary>
 This program displays the About form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuCommImp_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Files To Import form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuCommLog_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the communications log which contains info on files being imported and exported
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkLogSize">
 <summary>
 This procedure limits the size of the communications log to 600 lines of text
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.LogFileLineCount">
 <summary>
 This procedure counts the number of text lines in the communications log file
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuCommXmitWS_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Worksheets to Transmit form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuCust_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Customer Information form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuFileExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListCust_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Customer LIst form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListImportFiles_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Files to Import form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListOrders_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Orders List form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListWs_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Worksheet List form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListWsErrMsg_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Worksheet Error Message form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListWsToXmit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Worksheets to Transmit form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuListWsXmButNoVal_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Worksheets Transmitted but not Validated form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuMaintRepairDB_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to compact the database
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuMaintReXmit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Re-Transmit Worksheet form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuRefSPR_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Salesman form.  This form shows Salesman and Worksheet Defaults
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuUtilPresetVal_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Worksheet Default form so the user can modify worksheet defaults
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuUtilPurge_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Database Purge form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuViewCommLog_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the communications log using Notepad
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.UpdateStatus">
 <summary>
 This procedure makes calls to:
 1)  Check for Titan files that need to be imported into the database
 2)  Check for worksheets that have error messages that can be maintained
 3)  Check for files that need to be transmitted to Knitcraft
 4)  Check for worksheets that have been transmitted but no status update has been sent back 
 5)  Check for worksheets that need to be put into a file for transmit to Knitcraft
 6)  Check for worksheets that have been transmitted, but not yet converted to an order
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkForImportFiles">
 <summary>
 This procedure checks for Titan files that need to be imported into the database
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkForXmitFiles">
 <summary>
 This procedure checks for files that need to be transmitted to Knitcraft
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkForWsErrors">
 <summary>
 This procedure checks for worksheets that have error messages that can be maintained
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkForXmitedWkstWithNoResponse">
 <summary>
 This procedure checks for worksheets that have been transmitted but no status update has been sent back 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkForWkstNotOnOrder">
 <summary>
 This procedure checks for worksheets that have been transmitted, but not yet converted to an order
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkForWkstToConvertToFile">
 <summary>
 This procedure checks for worksheets that need to be put into a file for transmit to Knitcraft
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.Timer1_Tick(System.Object,System.EventArgs)">
 <summary>
 Timer used to check if there is an internet connection available
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.Timer2_Tick(System.Object,System.EventArgs)">
 <summary>
 Timer used to see if there are files to import into the database or export to KC
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.CheckFiles">
 <summary>
 This procedure is used to find out how many files are on the Titan server to be picked up (downloaded)
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.Timer3_Tick(System.Object,System.EventArgs)">
 <summary>
 Timer used to check if there are Titan files on the Knitcraft manufacturing system to download
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.Timer5_Tick(System.Object,System.EventArgs)">
 <summary>
 Timer that checks for email and files to download when this program starts; this timer is then disabled because Timer 3 and 
 Timer 4 check after the main screen is fully loaded and running.  Did not put it in the form load  event because the check 
 for files takes too much time and delays the showing of frmMainScreen.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblGotoPreviousWeekAppt_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays the 7 days prior to the first displayed date on the appointment calendar
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblGotoThisWeekAppt_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays the current week's calendar appointments
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblGotoNextWeekAppt_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays the 7 days after the last displayed date on the appointment calendar
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblQuickAppt_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will show/hide calendar appointments
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblEmailAppointments_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure displays a form which allows the user to select a date.  The date will be the start date email 7 days worth of
 calendar appointments
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblStCroix_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will display the St Croix Shop website in the default browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblStCroixKnits_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will display the St Croix Collections website in the default browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblSalesMeeting_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will display the Sales Meeting website in the default browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblEmailCustSv_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will display a new email window using the default mail client with the Sales Department email address in the To: box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblEmailAnyone_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will display a new email window using the default mail client with the IT Support email address in the To: box
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblTitanFileStatus_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will download any files that are on the Titan server to the local machine
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.llblShowAppointments_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 This procedure will Show/Hide the appointment calendar
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.frmMainScreen_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure loads when form is displayed.  It also performs the following:
 1)  Enables timers that perform various checks (the functions of the timers are described in the timer's Tick function)
 2)  Loads any appointments on the user's Outlook calendar into the calendar on this form
 3)  Checks if records exists in various tables to enable/disable menu items
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.cmdAddAppt_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure adds a customer appointment to the user's Microsoft Office Outlook calendar 
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.bndCustomers_CurrentChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the Customer Information in a box (label control) when the user is selecting a customer to add an 
 appointment
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.DnLoadKCFiles">
 <summary>
 This procedure downloads files from the Titan server
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.ListKCFiles">
 <summary>
 This procedure gets a list of files from the Titan server so that the DnLoadKCFiles procedure knows what to download
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.LoadOutlookAppointments">
 <summary>
 This procedure loads Microsoft Office Outlook calendar items into the calendar on this form
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.DayView1_NewAppointment(System.Object,Calendar.NewAppointmentEventArgs)">
 <summary>
 This procedure is used when creating new appointments on the calendar on this form
 </summary>
 <param name="sender"></param>
 <param name="args"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.DayView1_ResolveAppointments(System.Object,Calendar.ResolveAppointmentsEventArgs)">
 <summary>
 This procedure is used when adding appointments to the calendar on this form
 </summary>
 <param name="sender"></param>
 <param name="args"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.chkViewActiveCustomers_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure filters data in the customer table to show active customers or all customers
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.SetCalendarTitle">
 <summary>
 This procedure is used to create a title for the calendar on this form
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbFacebook_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open up the St Croix Collections Facebook page in the default internet browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbPinterest_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open up the St Croix Collections Pinterest page in the default internet browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbTwitter_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open up the St Croix Collections Twitter page in the default internet browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbFacebook_MouseEnter(System.Object,System.EventArgs)">
 <summary>
 This procedure displays a tooltip when the user hovers the mouse cursor over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbFacebook_MouseLeave(System.Object,System.EventArgs)">
 <summary>
 This procedure deactivates the tooltip when the mouse cursor is no longer hovering over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbPinterest_MouseEnter(System.Object,System.EventArgs)">
 <summary>
 This procedure displays a tooltip when the user hovers the mouse cursor over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbPinterest_MouseLeave(System.Object,System.EventArgs)">
 <summary>
 This procedure deactivates the tooltip when the mouse cursor is no longer hovering over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbTwitter_MouseEnter(System.Object,System.EventArgs)">
 <summary>
 This procedure displays a tooltip when the user hovers the mouse cursor over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbTwitter_MouseLeave(System.Object,System.EventArgs)">
 <summary>
 This procedure deactivates the tooltip when the mouse cursor is no longer hovering over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.mnuDatabase_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open up the database in the default program (user must be an administrator)
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbGooglePlus_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open up the St Croix Collections Google Plus page in the default internet browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbYouTube_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open up the St Croix Collections YouTube page in the default internet browser
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbGooglePlus_MouseEnter(System.Object,System.EventArgs)">
 <summary>
 This procedure displays a tooltip when the user hovers the mouse cursor over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbGooglePlus_MouseLeave(System.Object,System.EventArgs)">
 <summary>
 This procedure deactivates the tooltip when the mouse cursor is no longer hovering over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbYouTube_MouseEnter(System.Object,System.EventArgs)">
 <summary>
 This procedure displays a tooltip when the user hovers the mouse cursor over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmMainScreen.pbYouTube_MouseLeave(System.Object,System.EventArgs)">
 <summary>
 This procedure deactivates the tooltip when the mouse cursor is no longer hovering over the image
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.btnOK_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.frmWSDefaults_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 This procedure fires when the form closes; It updates the salesman table with any changes to worksheet defaults
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.frmWSDefaults_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure loads the defaults from the salesman table into the controls on the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.getDefaults">
 <summary>
 This procedure loads the defaults from the salesman table into the controls on the form
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.cmbSeason_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets the Season Code description into the lblSeasonCd label control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.cmbOrderCode_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets the Order Code description into the lblOrderCode label control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.cmbShipVia_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets the Ship Via Code description into the lblShipViaCd label control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.chkShowAll_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure changes the filter for the order code combo box and sorts the order codes descriptions
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWSDefaults.frmWSDefaults_Shown(System.Object,System.EventArgs)">
 <summary>
 This procedure sets the Season, Order Code, and Ship Via label controls with the defaults
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSalesPerson.cmdChgWSDefaults_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure displays the 'Change Worksheet Defaults' form and loads Season,OrderCode,and ShipVia text boxes with the defaults
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSalesPerson.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSalesPerson.frmSalesPerson_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to load Season,OrderCode,and ShipVia text boxes with the defaults
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSalesPerson.getDescriptions">
 <summary>
 This procedure loads Season,OrderCode,and ShipVia text boxes with the defaults
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSalesPerson.frmSalesPerson_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure loads the data for the controls on the form with the data from the Salesman table
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basCustInfo.GetCustDataF(System.String@)">
 <summary>
  This procedure sets public variables for the Customer table
 </summary>
 <param name="cCustNum"></param> The Customer number 
 <remarks></remarks> The public variables are used in various places throughout the program
</member>
<member name="M:KC01.basCustInfo.GetShipDataF(System.String@,System.String@)">
 <summary>
 This procedure sets public variables for the CustomerSH (Customer Ship To) table
 </summary>
 <param name="cCustNum"></param> the Customer number
 <param name="cShipNum"></param> the Customer ship-to number
 <remarks></remarks> The public variables are used in various places throughout the program
</member>
<member name="M:KC01.basCustInfo.NewCustNo">
 <summary>
 This function establishes a customer number for a new customer
 </summary>
 <returns></returns> This returns a new customer number which is derived from the salesman table
 <remarks></remarks> This is called when the user is in the customer information screen and clicks on the new customer button
</member>
<member name="M:KC01.basCustInfo.DuplicateCustomer(System.String@)">
 <summary>
 This function checks the customer file to see if the customer number already exists
 </summary>
 <param name="CustNo"></param> the customer number
 <returns></returns> A boolean indicating that the customer number does or does not already exist in the database
 <remarks></remarks> 
</member>
<member name="M:KC01.basCustInfo.isCustRecs">
 <summary>
 This function is no longer used and was not found to be in use in the previous VB6 version of this program
 </summary>
 <returns></returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basCustInfo.getCustSlsmnCd(System.String@)">
 <summary>
 This procedure gets the salesman code associated with the customer number
 </summary>
 <param name="cCusNum"></param> the customer number
 <remarks></remarks> The public variable 'cSalesmanCode' is assigned the salesman code from the customer record
</member>
<member name="M:KC01.frmCustList.chkViewActiveOnly_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will filter the customer list to display customer records where the status-code field is set to "P" when the 
 chkViewActiveOnly is check; when unchecked all customers are displayed
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.cmdCustomer_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will show the customer information screen and display the data for the seleted customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.cmdClearAll_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will deselect the "Print" checkbox for each customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks>Clearing the print checkbox for the customer tells the system to not include that customer when printing a list
 of customers</remarks>
</member>
<member name="M:KC01.frmCustList.cmdFindCust_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will find a customer using the name field in the customer table using the characters entered by the user in the 
 inputbox
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.cmdPrint_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will print a list of customers.  The 'prtselect' field of the customer record must be set to true in order for that
 record to be included on the report
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.cmdPrtPreview_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will load the frmPreviewCustList form to allow the user to preview a customer list report
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.cmdSelectAll_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will set the 'prtselect' field in the customer table for all customer records
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.frmCustList_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedures fires when the form is loaded.  It sets the sort  order of the customer list.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.frmCustList_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure fires when the form is loaded.  It loads the data from the customer table into the grid.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.dtgCustList_CurrentCellDirtyStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure moves the datagrid cursor to the current customer record
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.SortByName_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure changes the sort order of the customer list to sort by Customer Name
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.SortByCity_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure changes the sort order of the customer list to sort by the Customer's city
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmCustList.SortByState_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure changes the sort order of the customer list to sort by the Customer's State
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrders.FindOrder(System.Int64@)">
 <summary>
 This procedure will attempt to find an order using the value in 'cOrd'
 </summary>
 <param name="cOrd"></param>
 <returns>A boolean indicating that it found the order (true) or did not find the order (false)</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrders.btnExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form and sets the 'fromLocation' variable to nothing.  The 'fromLocation' variable is used to go back to 
 the form that was displayed prior to coming to this form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrders.frmOrders_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure will find an order if 'fromLocation' field is populated
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrders.frmOrders_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure fills the datagrid with order records
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkOrderComplete_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure will tab to the next field when the "enter/return' key is pressed
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdOrderCode_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Order Code Select screen so that the user can select an order code for the worksheet
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdPrintPreview_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will provide a print preview of the worksheet 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdSeason_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Season Code Select screen so that the user can select a season code for the worksheet
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdShipVia_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the Ship Via Code Select screen so that the user can select a ship via code for the worksheet
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.frmWorksheet_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure performs the following:
  1)  Fills a text box with (if any) error messages for this worksheet
  2)  Fills bottom grid with items that have been ordered on this worksheet
  3)  Sets the default sort and view for the grid that displays items ordered 
  4)  Checks to see if this is a new or existing worksheet and sets/fills the appropriate controls/variables
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.frmWorksheet_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure checks to see if this is a new worksheet and sets focus to the appropriate control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.isDupItemNo(System.String@)">
 <summary>
 This procedure is no longer used
 </summary>
 <param name="cItem"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.AddItemsToTable(System.String@)">
 <summary>
 This procedure makes calls to add an item that has been ordered to the ws-item-temp table
 </summary>
 <param name="cItemNum"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.SetItem2Var(System.String@)">
 <summary>
 This procedure populates variables from data in the item table. It also makes sure that the variables to not contain null values
 </summary>
 <param name="cItemNum"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.AddWsItemTempLine">
 <summary>
 This procedure creates a new record in the ws-item-temp file for an item that was ordered by the sales rep
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.frmWorksheet_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 This procedure fires when the form is closing, clears out any items in the ws-item-temp table and sets some variables for use 
 on this form and throughout the application
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.mebDept_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure simulates the user pressing tab when the user has pressed the 'enter/return' key
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdReturn_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will hide the two datagrids and their related controls for ordering items when the user clicks the return button
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.optViewBy_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will change the view on the ws-item-temp datagrid
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.optSortBy_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will change the sort on the ws-item-temp datagrid
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.tabMemosErrMsg_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets the 'PreviousTab' variable so that when coming back to this form, the last tab displayed will be displayed again
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtPO_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure simulates the user pressing tab when the user has pressed the 'enter/return' key
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnPrint_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will make a call to print the Worksheet (and memos on the worksheets if applicable)
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.CheckForWSMemos">
 <summary>
 This procedure will check to see if there are memos on the worksheet
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.PrintWSandMemos">
 <summary>
 This procedure prints worksheets using a Crystal Reports report and will also include memos on the worksheet (if applicable)
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkCancel_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will mark the worksheet as 'Cancelled'.  This means the user no longer wants this worksheet to be converted to an 
 order.  
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkReadyToXmit_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure marks the worksheet as "Ready To Transmit".  This means that the program will mark it to be prepared for transmit
 to Knitcraft.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnEditWS_Click(System.Object,System.EventArgs)">
 <summary>
 This button performs two functions:  To allow the user to edit a worksheet and also to save the data once the worksheet has been 
 modified.  This procedure performs the following:
  1)  Checks to see if the worksheet has changes and will save the changes if the user chooses to do so
  2)  Clears the ws-item-temp table if the user decides not to save changes
  3)  Loads existing worksheet data in the appropriate controls if it is an existing worksheet
  4)  Sets flags so that the program knows if it is in 'edit mode' or 'view mode'
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.setEditWsStatus(System.Boolean@)">
 <summary>
 This procedure sets flags to indicate to the program that it is in 'edit mode' or 'view mode'.  It also enables/disables controls
 based on what mode the worksheet is in.
 </summary>
 <param name="lEdFlag"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will close the form.  It the way the user got to this form was not from the main menu on the main screen, but from
 another form, this procedure will re-open that form.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnItems_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure hides most portions of the 'header' screen and will display the screen that is used to order items.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.ItemEditSetting">
 <summary>
 This procedure is no longer used
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.loadExistWsData">
 <summary>
 This procedure makes calls to load existing data from the ws-ord-head, wsmemo, and ws-ord-line tables into the worksheet form for 
 viewing/editing
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.UpdateWsHdFields">
 <summary>
 This procedure loads the data from the ws-ord-head table into the form's controls
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.SaveEditChanges">
 <summary>
 This procedure makes calls to save data from the worksheet header, worksheet lines and worksheet memos that has been modified
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dtpCancelBy_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure will tab to the next field when the "enter/return' key is pressed
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dtpDelvBy_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure will tab to the next field when the "enter/return' key is pressed
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.mebDept_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets a flag to identify that changes have been made to the data so that the user can choose to save it
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtOrderCd_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets a flag to identify that changes have been made to the data so that the user can choose to save it
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtPO_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets a flag to identify that changes have been made to the data so that the user can choose to save it
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtSeason_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets a flag to identify that changes have been made to the data so that the user can choose to save it
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtShipVia_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure sets a flag to identify that changes have been made to the data so that the user can choose to save it
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.LoadCustData">
 <summary>
 This procedure populates the name and number label controls on the customer side of the screen with the current customer info
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.LoadShipData">
 <summary>
 This procedure populates the name and number label controls on the customer ship toside of the screen with the current customer 
 ship to info
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.mebDept_Leave(System.Object,System.EventArgs)">
 <summary>
 This procedure limits the 'department' text to 8 characters
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtPO_Leave(System.Object,System.EventArgs)">
 <summary>
 This procedure limits the 'Purchase Order' text to 14 characters
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.LoadWorksheetMemos">
 <summary>
 This procedure loads the worksheet memos into the memo text box on the form (if any memos exist for this worksheet)
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.LoadWsItemEditTbl">
 <summary>
 This procedure loads items that have been ordered into the datagrid at the bottom of the screen
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.PutItemsInTemp">
 <summary>
 This procedure moves items from the ws-ord-line table into the WsItemTemp table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.SaveWorkSheetHead">
 <summary>
 This procedure saves the data from the worksheet header into the ws-ord-head table for new or existing worksheets
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.SaveWorkSheetLines">
 <summary>
 This procedure puts the worksheet line changes into variables to ensure that no null values exist, and then saves them into the
 ws-ord-line table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.SaveWorkSheetMemos">
 <summary>
 This procedure saves the data from the worksheet memo text box into records in the WsMemo table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.UpdateWsLine">
 <summary>
 This procedure saves the data into the ws-ord-line file from the temporary WsItemTemp table
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.NewWsInit">
 <summary>
 This procedure initializes and populates the controls when creating a new worksheet
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.ReCalcTotals">
 <summary>
 This procedure calculates totals for items ordered on the worksheet and displays the totals on the item entry screen
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.setFrameSettings">
 <summary>
 This procedures set various frame and button settings for different configurations
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkValidData">
 <summary>
 This procedures checks the worksheet data to make sure all required information is there and that it is not missing and is valid.
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkForSeason">
 <summary>
 This procedures checks to make sure that their is a season code on the worksheet
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkForOrderCd">
 <summary>
 This procedures checks to make sure that their is an order code on the worksheet
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkForShipViaCd">
 <summary>
 This procedures checks to make sure that their is a ship via code on the worksheet
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.mebDept_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure highlights any text when the user enters the field so that it can be overwritten if the user chooses to do so
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtPO_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure highlights any text when the user enters the field so that it can be overwritten if the user chooses to do so
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkOrderComplete_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dtpDelvBy_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dtpCancelBy_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdSeason_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdOrderCode_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdShipVia_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkReadyToXmit_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.chkCancel_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnExit_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnPrint_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnItems_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.btnEditWs_Enter(System.Object,System.EventArgs)">
 <summary>
 This procedure populates the help text in the help text box when the user enters the control
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.clrNotUsedMemos(System.String@)">
 <summary>
 This procedure is called to make sure to clear any memos if the user chooses to not save the worksheet
 </summary>
 <param name="cWsNum"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdClearStyleQty_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will update the 'deleted' field to yes for any items from the worksheet if the user chooses to delete this style
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.DeleteTmpItems(System.String)">
 <summary>
 This procedure will mark the 'deleted' field to yes for any items in the worksheet that the user wants to delete
 </summary>
 <param name="tmpItem"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtStyle_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 When the user enters test into the 'Style' textbox, this procedure will make a call to create the row and column labels for the 
 datagrid that is used to put in quantities of items they want to order.  If this is a style that they already ordered on this 
 worksheet, this procedure makes a call to load the quantity amounts for those items.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.LoadColorsSizes(System.String@)">
 <summary>
 This is the procedure that creates the row and column labels for the datagrid where the user enters quantities of items they 
 wish to order
 </summary>
 <param name="itemNo"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.UpdateStyleTotals">
 <summary>
 This procedure updates the price and quantity totals for the current style
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.CheckPrevOrder(System.Int16@)">
 <summary>
 This procedure is a check to see if there is an order for the same item, for the same season, the same order code, and for 
 the same customer.  If so, it provides a warning message.
 </summary>
 <param name="AscKeyPressed"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.LoadQuantities">
 <summary>
 This procedure loads the quantities for items already ordered for this style into the upper datagrid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdNextStyle_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure resets controls when the user clicks on this button to show a new style
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtWSMemo_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure checks to make sure that the user does not press the 'enter/return' key while in the memos text box
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.GetData(System.String)">
 <summary>
 This procedure refreshes the temp-items data grid and is called when items have been added or modified
 </summary>
 <param name="selectCommand"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dgvColorSize_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure adds items to the 'items ordered grid' below when leaving a cell in the upper datagrid.  It performs a number of 
 checks to make sure the user is ordering the correct item and quantity.  It then makes a call to update Style totals and Worksheet
 totals.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dgvColorSize_CellEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure is used to mark the location of the current cell.  It changes the color of the row and column labels to more easily
 identify what the user is ordering.  It also updates various control text to give item information to the user such as shipping
 dates and quantities available.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dgvcolorsize_CellLeave(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure is used to put the column and row colors back to the original color after the user leaves a cell
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dtpCancelBy_ValueChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure verifies that the user is selecting a valid 'cancel by' date on the worksheet header
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dtpDelvBy_ValueChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure verifies that the user is selecting a valid 'deliver by' date on the worksheet header
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.cmdEmailWorksheet_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to email the worksheet
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.SuppressClicks(System.Object,System.EventArgs)">
 <summary>
 This procedure is currently not being used. However, it is to prevent a user from checking a checkbox.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.dgvColorSize_CellMouseDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
 <summary>
 This procedure will display the data for the item selected in the inventory screen
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWorksheet.txtStyle_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 This procedure will clear the 'item ordering' screen by simulating a click of the 'Next Style' button if the user deletes the 
 text out of the 'style' box.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSeasonSelect.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form and resets global variables to nothing
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSeasonSelect.cmdSelect_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will populate global variables for use in worksheet entry
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSeasonSelect.frmSeasonSelect_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure will fire when the form is displayed and will fill the list box with season code descriptions
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSeasonSelect.lstSeason_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will get a season code based on the season code description
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSeasonSelect.lstSeason_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 This procedures selects a season for use in worksheet entry
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmSeasonSelect.lstSeason_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedures selects a season for use in worksheet entry using the keyboard
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.GetDB">
 <summary>
 The procedures gets the database location and sets the connection string; it also initializes global variables for salesman record
 data
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.KillProcess(System.Int32@)">
 <summary>
 This procedure kills (terminates) a process
 </summary>
 <param name="hwnd">The hwnd (handle) of the process to terminate</param> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.NewWorkSheetNo">
 <summary>
 This procedure gets the next available worksheet number from the salesman file for use in creating a new worksheet
 </summary>
 <returns>A string variable with the worksheet number</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.NewWorkSheetNoM(System.Int32@)">
 <summary>
 This procedure is no longer used
 </summary>
 <param name="nManWsNo"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.getSlsmnInitData">
 <summary>
 This procedure sets up some public variable associated with the salesman table for use throughout the program
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.SetNewWsNo">
 <summary>
 use the following to increment the worksheet number base when when saving the worksheet
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isValidItemNo(System.String@)">
 <summary>
 This procedure checks to see if an item is found in the item table
 </summary>
 <param name="cItemNum">The item number to check</param> 
 <returns>Boolean indicating whether the item is valid (true) or not valid (false)</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isDateValid(System.String@)">
 <summary>
 This procedure is no longer in use
 </summary>
 <param name="vDate"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isValidShipViaCd(System.String@)">
 <summary>
 This procedure is no longer in use
 </summary>
 <param name="cSvCode"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findShipViaCd(System.String@)">
 <summary>
 This procedure finds the ship via code based on the ship via description
 </summary>
 <param name="cSvDesc"> The ship via description that is associated with the ship via code being sought</param>
 <returns>A string variable with the ship via code</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findFirstShipViaCode">
 <summary>
 This procedure is no longer in use
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findShipViaDesc(System.String@)">
 <summary>
 This procedures get the ship via description
 </summary>
 <param name="cSvCode"></param> The ship via code
 <returns>A string with the ship via code description</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.ClrWSItemTemp">
 <summary>
 This procedures deletes all records in the worksheet items temp file
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.WarnNotOrderable">
 <summary>
 This procedure is no longer used
 </summary>
 <remarks>Item number in file but item not orderable</remarks>
</member>
<member name="M:KC01.basGeneralProcedures.WarnOutsideDateRange">
 <summary>
 This procedure is no longer in use
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isTableEmpty(System.Int16@)">
 <summary>
 This procedure checks to see if the table is empty
 </summary>
 <param name="nTblNo">The table name that is being checked</param> 
 <returns>A boolean indicating that the table is empty (true) or not empty (false)</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.BubbleSort(System.String[]@)">
 <summary>
 This procedure is used to sort an array of string items
 </summary>
 <param name="Aray">The name of the array</param> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isValidSeasonCd(System.String@)">
 <summary>
 This procedure validates the season code that is being passed in and sets public season code variables
 </summary>
 <param name="cCode">The name of the season code to validate</param> 
 <returns>Boolean indicating that the season code is valid (true) or not valid (false)</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findSeasonCd(System.String@)">
 <summary>
 This procedure finds a season code in the season file 
 </summary>
 <param name="cDesc">The season description to look for in the season file</param> 
 <returns> Season Code </returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findSeasonDesc(System.String@)">
 <summary>
 This procedure finds a season code description
 </summary>
 <param name="cCode">The season code being sought</param> 
 <returns>A string variable with the season code description</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isValidOrderType(System.String@)">
 <summary>
 This procedure checks if an order type code is found in the ordertype table
 </summary>
 <param name="cCode">The order type code being checked</param> 
 <returns>A Boolean indicating that the order type code is valid (true) or not valid (false)</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findOrderTypeCd(System.String@)">
 <summary>
 This procedure attempts to find an order type code 
 </summary>
 <param name="cDesc">Order type description</param> 
 <returns>Order type code</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findOrdTypeDesc(System.String@)">
 <summary>
  This procedures finds an order type description
 </summary>
 <param name="cCode">Order type code</param> 
 <returns>Order type description</returns> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.logFileAdd(System.Int16@,System.String@)">
 <summary>
 This procedures writes to the application log file
 </summary>
 <param name="nCase">The type of entry to make in the log file</param> 
 <param name="cMsg">The message to insert into the log file</param> 
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.isWorkSheetNoUsed(System.String@)">
 <summary>
 This procedure will see if the worksheet number is used in the ws-ord-head or order tables
 </summary>
 <param name="cWsNo">The worksheet number to check</param>
 <returns> A boolean variable that indicates that the worksheet is used (true) or not used (false)</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.HelpMsgWs(System.Int16@)">
 <summary>
 This procedure displays help messages when entering worksheet information
 </summary>
 <param name="nHlpNo">The help message number</param>
 <returns> The help message text</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.PurgeErrorMsgFile">
 <summary>
 This procedure sets the 'canmaintain' field of the wserrmsg record equal to the 'allow-manual-maint' of the ws-ord-head record
 </summary>
 <remarks>If the worksheet is not maintainable, the worksheet error msg table should not be either</remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findWsCustName(System.String@)">
 <summary>
 This procedure finds a customer name in the customer table
 </summary>
 <param name="CustNum">The customer number</param>
 <returns>A string variable containing the customer name</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.findWsCustNo(System.String@)">
 <summary>
 This procedure finds a customer number associated with a worksheet
 </summary>
 <param name="WsNum">A worksheet number</param>
 <returns>if the worksheet number is found in the ws-ord-head table a string containing the customer number is returned </returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.EmailBadFiles(System.String@,System.String@)">
 <summary>
 This procedures sends an email with the name and attached file that was not successfully imported into the database
 </summary>
 <param name="BadFile">The new name of the 'bad' file</param>
 <param name="FilePath">The path to the 'bad' file</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.Email(System.String@,System.String@,System.String@,System.String@,System.Boolean@)">
 <summary>
 This procedure sends an email using an SMTP client
 </summary>
 <param name="recipient">The email address of the recipient</param>
 <param name="subject">The subject of the email</param>
 <param name="body">The body of the email</param>
 <param name="attachment">The attachement path</param>
 <param name="ishtml">A boolean variable indicating that this email should be in HTML format (true) or in plain text (false)</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.EmailWithDisplay(System.String@,System.String@,System.String@,System.String@)">
 <summary>
 This procedure sends an email using Microsoft Office Outlook and displays a user interface for users to interact with
 </summary>
 <param name="recipient">The email address of the recipient</param>
 <param name="subject">The subject of the email</param>
 <param name="body">The body of the email</param>
 <param name="attachment">The attachement path</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.RunShell(System.String@)">
 <summary>
 This procedure will start a process
 </summary>
 <param name="cmdline">The path of the process to start</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.Connection">
 <summary>
 This procedure determines if there is an internet connection
 </summary>
 <returns>A boolean indicating that there is internet connection (true) or there isn't an internet connection (false) </returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.TextSearch(System.Windows.Forms.TextBox@,System.Windows.Forms.DataGridView@,System.Int16@)">
 <summary>
 This procedure is no longer in use
 </summary>
 <param name="box"></param>
 <param name="msfx"></param>
 <param name="ind"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.Proper(System.String@)">
 <summary>
 This procedure sets a string to proper case (each separate word is capitalized)
 </summary>
 <param name="AnyValue">A string value</param>
 <returns>A string value in proper case</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.IsProcessRunning(System.String)">
 <summary>
 This procedure checks to see if a process is running
 </summary>
 <param name="name">The process name</param>
 <returns>A boolean indicating whether a process is running (true) or not (false)</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.EmailWorksheets(System.String@,System.String@)">
 <summary>
 This procedure emails a worksheet  
 </summary>
 <param name="worksheetid">The worksheet number being emailed</param>
 <param name="custemail">The email address of the customer that the report is being mailed to</param>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.CheckForWSMemos(System.String@)">
 <summary>
 This procedure checks to see if a worksheet has memos on it
 </summary>
 <param name="worksheetid">The worksheet number to check</param>
 <returns>A boolean indicating that a worksheet has memos (true) or doesn't have memos (false) </returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.Nz(System.Object)">
 <summary>
 This procedure replicates the Nz function found in VB6. It prevents a null value from being used
 </summary>
 <param name="Value">The value of the object</param>
 <returns>An empty string ("") or the value of the object</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.GetProgramDefaults(System.String@)">
 <summary>
 This procedure gets a field from the 'defaults' table in the database
 </summary>
 <param name="VariableToSet">The name of the field in the 'defaults' table </param>
 <returns>The value from the field</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.basGeneralProcedures.GetEnvironmentVar(System.String)">
 <summary>
 This procedure gets the value of a Windows environment variable
 </summary>
 <param name="TheString">The name of the environment variable</param>
 <returns>The value of the environment variable</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.cmdCustomer_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure shows the customer information screen and displays the data for the selected customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.cmdPrint_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure prints a report of worksheet error messages
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.cmdPrintPreview_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure shows the frmPreviewWKstErr form which is a print preview of the error message list 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.cmdWorksheet_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will show the worksheet form and display the data from the selected ws-ord-head record
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.frmErrMsgList_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure fires when the form is loaded and makes a couple of calls to purge the worksheet error message file and also
 load the grid with worksheet error message records
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.findMaintWsErr">
 <summary>
 This procedure loads the data into the worksheet error message grid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.FormatErrMsgGrid">
 <summary>
 This procedure formats the grid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmErrMsgList.dtgWSErrMsg_CurrentCellChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure updates the status messages at the bottom of the screen to show the current customer name and number
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.cmdCreateXmitFile_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure makes calls to create a file that contains worksheet data to send to the Titan system 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.getXmitListPC">
 <summary>
 This procedure will populate a list box with the names of files that are to be transitted to the Titan server at Knitcraft
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.FindWorksheets(System.Int32)">
 <summary>
 This procedure checks the first line of a worksheet file to make sure it is a valid worksheet
 </summary>
 <param name="i"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.cmdTransfer_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure transfers the export files to the Knitcraft server identified by the field 'FTPHostName' in the 'Defaults' table
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.getfilestoupload">
 <summary>
 This procedure creates an array of files that are ready to be exported to Knitcraft
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.frmWsToXmitList_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure fires at form startup and will make calls to get a list of files to be exported to Knitcraft
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.frmWsToXmitList_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure fires at form startup andd will load data into the datagrid with worksheets that are ready to transmit
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.ExportWorksheets">
 <summary>
 This procedure will put worksheet data into a text file for transmitting to the Titan server where it will attempt to be converted 
 into orders. 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.chkForUpLoadDir">
 <summary>
 This procedure checks to make sure the upload directory (where the export files are stored) exists
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.ExportData">
 <summary>
 This procedure makes calls to create files that put worksheet data into export files
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.ExportFileHeader">
 <summary>
 This procedure writes the file header information to the text file 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.ExportWsHead">
 <summary>
 This procedure puts the worksheet header (ws-ord-head table) information into the export file
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.ExportWsLines">
 <summary>
 This procedure puts the worksheet line (ws-ord-line table) information into the export file
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.ExportWsMemos">
 <summary>
 This procedure puts the worksheet memos (wsmemo table) information into the export file.
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.GetExportFileName">
 <summary>
 This procedure creates a file name for the export file by getting the next available number in the 'Salesman' table
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.GetXmitList">
 <summary>
 This procedure makes a call to write to the application log file with what files it is exporting
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.prtNewCust(System.String@,System.Int16@,System.String@)">
 <summary>
 This procedure will write out a new customer's information to the export file
 </summary>
 <param name="cCustNum"></param>
 <param name="nLine"></param>
 <param name="cWsNum"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.prtNewShip(System.String@,System.String@,System.Int16@,System.String@)">
 <summary>
 This procedure will write out a new customer's ship to information to the export file
 </summary>
 <param name="cCustNum"></param>
 <param name="cShipNum"></param>
 <param name="nLine"></param>
 <param name="cWsNum"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmWsToXmitList.GetData(System.String)">
 <summary>
 This procedure refreshes data in the worksheets data grid
 </summary>
 <param name="selectCommand"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.getImportList">
 <summary>
 This procedure builds a list of files that will be imported into the database
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.ImportFiles">
 <summary>
 This procedure imports files into data files into the database
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.chkForDnLoadDir">
 <summary>
 This procedure checks to see if the path to the import folder exists 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.frmFilesToImportList_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
 <summary>
 This procedure clears the text from controls before closing the form
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.frmFilesToImportList_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure will play a flash object, makes a call to import files and a call to purge the error message file
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.BackgroundWorker1_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
 <summary>
 This procedure runs a background worker to import the data files into the database.  A background worker runs a process on a 
 separate thread so that other CPU intensive processes (such as playing the flash movie) running on the main thread are not 
 slowed down. 
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmFilesToImportList.BackgroundWorker1_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>
 This event fires when the background worker has completed it's task.  This procedure will write an entry to a log file indicating
 the completion status of the file that was being imported.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNoVal.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNoVal.cmdGetCustomer_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the customer information screen with data from the selected customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNoVal.cmdGetWS_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will display the worksheet screen with data from the selected worksheet
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmXmitButNoVal.frmXmitButNoVal_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure will load the datagrid with worksheet data where the worksheet has been transmitted to Knitcraft but has not been
 validated on the Titan server and sent back to the sales rep
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.cmbOrderCodes_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to load orders data and show the customer information on the status bar for the currently selected 
 customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.cmbSeasonCodes_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to load orders data and show the customer information on the status bar for the currently selected 
 customer
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.cmdCustomer_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks on this button, this procedure will load the customer information screen and display the data for the 
 customer that is selected in the datagrid.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.cmdViewOrd_Click(System.Object,System.EventArgs)">
 <summary>
 When the user clicks this button, this procedure will open the 'frmOrders' screen and display the data for the order selected 
 in the datagrid
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.frmListOrder_Load(System.Object,System.EventArgs)">
 <summary>
 This event fires when the form is opened.  It loads the datagrid with order information and also loads the order code and 
 season combo boxes
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.frmListOrder_Activated(System.Object,System.EventArgs)">
 <summary>
 This event fires when the form is displayed.  It sets the cursor position of the row within the datagrid and sets the text in
 the order and season code combo boxes
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.LoadOrders">
 <summary>
 This procedure will load the order records into the datagrid
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.BuildWhereStmt">
 <summary>
 This procedure builds the data that will be displayed in the datagrid
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.LoadOrderCodesCombo">
 <summary>
 This procedure loads order codes into a combo box
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.LoadSeasonCodesCombo">
 <summary>
 This procedure loads season codes into a combo box
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.frmListOrder_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
 <summary>
 This procedure sets the 'tmpOrderListRowPos' variable which is used to remember the row position when coming back to this form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.optDisplay_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 When the user clicks a display option, this procedure will load order records into the datagrid
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.findOrdCustNo(System.String@)">
 <summary>
 This procedure finds a customer number when an order number is passed in
 </summary>
 <param name="OrdNum"></param>
 <returns>A customer number</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.findOrdCustName(System.String@)">
 <summary>
 This procedure finds a customer name when the customer number is passed in
 </summary>
 <param name="CustNum"></param>
 <returns>A customer name</returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.optAllOrders_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 When the user clicks a display option, this procedure will load order records into the datagrid
 </summary>
 <param name="Sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.optOpenOrders_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 When the user clicks a display option, this procedure will load order records into the datagrid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.optShippedOrders_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
  When the user clicks a display option, this procedure will load order records into the datagrid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.optPartiallyShippedOrders_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
  When the user clicks a display option, this procedure will load order records into the datagrid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.cmdFindOrder_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure searches for an order using input from the user
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListOrder.DisplaySelectedCust">
 <summary>
 This procedure display order information in the status bar at the bottom of the window
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.cmdFindWS_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure asks for user input and searches for a ws-ord-head record using the text from user input
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.cmdViewOrder_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will search for an order record based on the selected ws-ord-head record.  If it finds the order record, it will
 open the 'Orders' form and display the data for that order number
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.cmdViewWs_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will open the 'Worksheet' form and display data for the selected worksheet
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.cmdViewCustomer_Click(System.Object,System.EventArgs)">
 <summary>
 This procedue will open the 'Customer Information' form and display data for the selected customer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.displaySelectedCust">
 <summary>
 This procedure display information in the status bar at the bottom of the screen for the customer that belongs to the seleted 
 worksheet
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.frmListWs_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure fires when the form is loaded and fills the datagrid with ws-ord-head records
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.frmListWs_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure fires when the form is loaded and fills and sorts the datagrid and displays information on the worksheet on the 
 status bar located at the bottom of the screen.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.findWsCustNo(System.String@)">
 <summary>
 This function finds a customer number from the worksheet number
 </summary>
 <param name="WsNum">The worksheet number</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.findWsCustName(System.String@)">
 <summary>
 This procedure searches for the customer table using 'CustNum' and returns the customer name
 </summary>
 <param name="CustNum"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.setCmdBtn(System.Int16@)">
 <summary>
 This procedure will enable or disable the 'View Order' and 'View Worksheet' buttons
 </summary>
 <param name="nNdx"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.optAllWorksheets_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will call 'SetupFilter' to clear the filter and display all worksheets and show information on the status bar for 
 the selected worksheet
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.optWkstNotTransmitted_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will call 'SetupFilter' and display worksheets not transmitted to Knitcraft and show information on the status 
 bar for the selected worksheet
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.optWkstTransmittedWaiting_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will call 'SetupFilter' and display worksheets transmitted to Knitcraft but not yet returned to the salesrep
 and also shows information on the status bar for the selected worksheet
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.chkNoOrderWs_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will filter worksheets and only display worksheets that have not been converted into an order
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.SetupFilter">
 <summary>
 This procedure is used for filter that data that appears in the datagrid
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:KC01.frmListWs.dtgWorksheets_CellEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
 <summary>
 This procedure will show information in the status bar for the selected worksheet and will also enable/disable the 'View Order'
 button when an order is available/unavailable
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.chkShowAll_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure makes a call to reload the list of order codes and will show all
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure sets global variables to nothing if the user cancels the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.cmdSelect_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure sets global variables for use in worksheet entry
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.frmOrdCodeSelect_Activated(System.Object,System.EventArgs)">
 <summary>
 This procedure set the focus to the list view box when the form is displayed
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.frmOrdCodeSelect_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure will set up the columns for the list view box that holds the order codes
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.LoadListOT">
 <summary>
 This procedure will load the list view box with order codes 
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.ListView1_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 This procedure will select an order code
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.ListView1_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedures allows the users to select an order code by using the keyboard
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmOrdCodeSelect.ListView1_ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
 <summary>
 This procedure will sort the order codes
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="T:KC01.ListViewComparer">
 <summary>
 This class is used in sorting the list view box of order codes
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPurgeDB.chkDefPurge_CheckStateChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure updates the 'PurgeCheck' field in the 'Purge Defaults' table in the database to check to see if a purge needs to be
 run.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPurgeDB.cmdExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPurgeDB.cmdPurge_Click(System.Object,System.EventArgs)">
 <summary>
 This is the procedure that will start the other purge procedures
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPurgeDB.frmPurgeDB_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure runs when the form is displayed.  It will default the date and other controls needed to purge data.  If 'Autopurge' 
 is set to true (set in frmMainScreen) it will start the purge routines automatically. 
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmPurgeDB.txtDefPurgeMonths_TextChanged(System.Object,System.EventArgs)">
 <summary>
 This procedure will update the 'purgemonths' field in the Purge Defaults table if the user changes the text.  'purgemonths' is 
 the interval number of months that the system will check to see if a purge must be completed.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmShipViaSelect.btnSelect_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure populates global variables for use in worksheet entry
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmShipViaSelect.cmdCancel_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form and sets global variables to nothing
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmShipViaSelect.frmShipViaSelect_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure fires when the form is displayed and loads the ship via codes into the list box
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmShipViaSelect.lstShipVia_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure will get a ship via code by sending the ship via description to 'findShipViaCode'
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmShipViaSelect.lstShipVia_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 This procedure selects a ship via description when the user double-click a selection
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmShipViaSelect.lstShipVia_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 This procedure selects a ship via description using the keyboard
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmResetXmit.btnExit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure closes the form
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmResetXmit.btnResetXmit_Click(System.Object,System.EventArgs)">
 <summary>
 This procedure updates the ws-ord-head record in the database to make it appear as though it has never been transmitted to the
 Knitcraft server.  This is useful when Titan system does not show that the worksheet was received.
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmResetXmit.frmResetXmit_Load(System.Object,System.EventArgs)">
 <summary>
 This procedure loads ws-ord-head data into the grid so that the worksheet can be retransmitted if selected to do so
 </summary>
 <param name="eventSender"></param>
 <param name="eventArgs"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.frmResetXmit.GetData(System.String)">
 <summary>
 This procedure updates the datagrid after changes have been made to the data.  If a user sets a worksheet for retransmit, it 
 should not appear in the datagrid.  This procedure refreshes the data in the datagrid.
 </summary>
 <param name="selectCommand"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeOrphanRecords">
 <summary>
 Purges orpan records in the Order,Order Line,WsOrdHead,WsLines,Customer and CustomerSh tables
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeOrderWithNoOrderLines">
 <summary>
 Deletes records from the order table where there are no related Order Line records
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeOrderLinesWithNoOrders">
 <summary>
 Deletes records from the Order Line table where there are no related Order records
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeCustShWithNoCustomer">
 <summary>
 Deletes records from the CustomerSh table where there is no related Customer record
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeWsHeadWithoutWsLines">
 <summary>
 Deletes records from the WsOrdHead table where there are no related WsOrdLine records
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeWsLinesWithOutWSHead">
 <summary>
 Deletes records from WsOrdLine where there isn't a related WsOrdHead record
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.CompactDatabase(System.Boolean@)">
 <summary>
 Runs the compact and repair process on the current database
 </summary>
 <param name="ShowMessage"></param>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeNewCustRecsWithNoWksts">
 <summary>
 Deletes records from the Customer table where there are no WsOrdHead records with that customer number
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeItems">
 <summary>
 Deletes records from the item table in two phases
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeItemsPhase1">
 <summary>
 Deletes records from the Item table where there is no quantity to sell and item is not available to sell and the lastupdate date is older than the purge date selected on the purge screen
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.PurgeItemsPhase2">
 <summary>
 This procedure deletes records from the Item table where the attributed item is part of a complete 'style/color/size' item but is no longer needed 
 For example, item '19905000' would no longer be needed if there aren't any '19905000 + size' items
 </summary>
 <remarks></remarks>
</member>
<member name="M:KC01.basUtilRoutines.DependentItems(System.String@,System.String@,System.String@)">
 <summary>
 This procedure deletes records from the Item table where the attributed item is part of a complete 'style/color/size' item but is no longer needed 
 For example, item '19905000' would no longer be needed if there aren't any '19905000 + size' items
 </summary>
 <param name="varAttrib1">Attribute 1</param>
 <param name="varAttrib2">Attribute 2</param>
 <param name="varAttrib3">Attribute 3</param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
